<?php

/**
 * BaseRdDetailMirroir
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $mirroir_id
 * @property decimal $largeur_min
 * @property decimal $hauteur_min
 * @property decimal $rais_bas
 * @property decimal $rais_haut
 * @property decimal $dormant
 * @property decimal $hauteur_couvre_joint
 * @property decimal $largeur_couvre_joint
 * @property decimal $sernie
 * @property decimal $chicone
 * @property decimal $traverse
 * @property decimal $largeur_vitre
 * @property decimal $hauteur_vitre
 * @property decimal $hauteur_dormant
 * @property decimal $largeur_dormant
 * @property decimal $hauteur_parclose30
 * @property decimal $largeur_parclose30
 * @property decimal $hauteur_zporte
 * @property decimal $largeur_zporte
 * @property decimal $traverse140
 * @property decimal $hauteur_cadre
 * @property decimal $largeur_cadre
 * @property decimal $ljb
 * @property decimal $hjb
 * @property decimal $quantite
 * @property RdMirroir $fk_detailmirroir
 * @property RdMirroir $RdMirroir
 * @property Doctrine_Collection $RdFacture
 * 
 * @method integer             getMirroirId()            Returns the current record's "mirroir_id" value
 * @method decimal             getLargeurMin()           Returns the current record's "largeur_min" value
 * @method decimal             getHauteurMin()           Returns the current record's "hauteur_min" value
 * @method decimal             getRaisBas()              Returns the current record's "rais_bas" value
 * @method decimal             getRaisHaut()             Returns the current record's "rais_haut" value
 * @method decimal             getDormant()              Returns the current record's "dormant" value
 * @method decimal             getHauteurCouvreJoint()   Returns the current record's "hauteur_couvre_joint" value
 * @method decimal             getLargeurCouvreJoint()   Returns the current record's "largeur_couvre_joint" value
 * @method decimal             getSernie()               Returns the current record's "sernie" value
 * @method decimal             getChicone()              Returns the current record's "chicone" value
 * @method decimal             getTraverse()             Returns the current record's "traverse" value
 * @method decimal             getLargeurVitre()         Returns the current record's "largeur_vitre" value
 * @method decimal             getHauteurVitre()         Returns the current record's "hauteur_vitre" value
 * @method decimal             getHauteurDormant()       Returns the current record's "hauteur_dormant" value
 * @method decimal             getLargeurDormant()       Returns the current record's "largeur_dormant" value
 * @method decimal             getHauteurParclose30()    Returns the current record's "hauteur_parclose30" value
 * @method decimal             getLargeurParclose30()    Returns the current record's "largeur_parclose30" value
 * @method decimal             getHauteurZporte()        Returns the current record's "hauteur_zporte" value
 * @method decimal             getLargeurZporte()        Returns the current record's "largeur_zporte" value
 * @method decimal             getTraverse140()          Returns the current record's "traverse140" value
 * @method decimal             getHauteurCadre()         Returns the current record's "hauteur_cadre" value
 * @method decimal             getLargeurCadre()         Returns the current record's "largeur_cadre" value
 * @method decimal             getLjb()                  Returns the current record's "ljb" value
 * @method decimal             getHjb()                  Returns the current record's "hjb" value
 * @method decimal             getQuantite()             Returns the current record's "quantite" value
 * @method RdMirroir           getFkDetailmirroir()      Returns the current record's "fk_detailmirroir" value
 * @method RdMirroir           getRdMirroir()            Returns the current record's "RdMirroir" value
 * @method Doctrine_Collection getRdFacture()            Returns the current record's "RdFacture" collection
 * @method RdDetailMirroir     setMirroirId()            Sets the current record's "mirroir_id" value
 * @method RdDetailMirroir     setLargeurMin()           Sets the current record's "largeur_min" value
 * @method RdDetailMirroir     setHauteurMin()           Sets the current record's "hauteur_min" value
 * @method RdDetailMirroir     setRaisBas()              Sets the current record's "rais_bas" value
 * @method RdDetailMirroir     setRaisHaut()             Sets the current record's "rais_haut" value
 * @method RdDetailMirroir     setDormant()              Sets the current record's "dormant" value
 * @method RdDetailMirroir     setHauteurCouvreJoint()   Sets the current record's "hauteur_couvre_joint" value
 * @method RdDetailMirroir     setLargeurCouvreJoint()   Sets the current record's "largeur_couvre_joint" value
 * @method RdDetailMirroir     setSernie()               Sets the current record's "sernie" value
 * @method RdDetailMirroir     setChicone()              Sets the current record's "chicone" value
 * @method RdDetailMirroir     setTraverse()             Sets the current record's "traverse" value
 * @method RdDetailMirroir     setLargeurVitre()         Sets the current record's "largeur_vitre" value
 * @method RdDetailMirroir     setHauteurVitre()         Sets the current record's "hauteur_vitre" value
 * @method RdDetailMirroir     setHauteurDormant()       Sets the current record's "hauteur_dormant" value
 * @method RdDetailMirroir     setLargeurDormant()       Sets the current record's "largeur_dormant" value
 * @method RdDetailMirroir     setHauteurParclose30()    Sets the current record's "hauteur_parclose30" value
 * @method RdDetailMirroir     setLargeurParclose30()    Sets the current record's "largeur_parclose30" value
 * @method RdDetailMirroir     setHauteurZporte()        Sets the current record's "hauteur_zporte" value
 * @method RdDetailMirroir     setLargeurZporte()        Sets the current record's "largeur_zporte" value
 * @method RdDetailMirroir     setTraverse140()          Sets the current record's "traverse140" value
 * @method RdDetailMirroir     setHauteurCadre()         Sets the current record's "hauteur_cadre" value
 * @method RdDetailMirroir     setLargeurCadre()         Sets the current record's "largeur_cadre" value
 * @method RdDetailMirroir     setLjb()                  Sets the current record's "ljb" value
 * @method RdDetailMirroir     setHjb()                  Sets the current record's "hjb" value
 * @method RdDetailMirroir     setQuantite()             Sets the current record's "quantite" value
 * @method RdDetailMirroir     setFkDetailmirroir()      Sets the current record's "fk_detailmirroir" value
 * @method RdDetailMirroir     setRdMirroir()            Sets the current record's "RdMirroir" value
 * @method RdDetailMirroir     setRdFacture()            Sets the current record's "RdFacture" collection
 * 
 * @package    Rdv
 * @subpackage model
 * @author     Bongas
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRdDetailMirroir extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('rd_detail_mirroir');
        $this->hasColumn('mirroir_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('largeur_min', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('hauteur_min', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('rais_bas', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('rais_haut', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('dormant', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('hauteur_couvre_joint', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('largeur_couvre_joint', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('sernie', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('chicone', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('traverse', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('largeur_vitre', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('hauteur_vitre', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('hauteur_dormant', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('largeur_dormant', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('hauteur_parclose30', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('largeur_parclose30', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('hauteur_zporte', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('largeur_zporte', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('traverse140', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('hauteur_cadre', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('largeur_cadre', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('ljb', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('hjb', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             ));
        $this->hasColumn('quantite', 'decimal', null, array(
             'type' => 'decimal',
             'notnull' => true,
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('RdMirroir as fk_detailmirroir', array(
             'local' => 'mirroir_id',
             'foreign' => 'id'));

        $this->hasOne('RdMirroir', array(
             'local' => 'id',
             'foreign' => 'nombre_id'));

        $this->hasMany('RdFacture', array(
             'local' => 'id',
             'foreign' => 'detailmirroir_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}